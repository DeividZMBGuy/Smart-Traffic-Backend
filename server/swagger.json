{
  "swagger": "2.0",
  "info": {
    "description": "This is Mind Residentials official documentation. You can find out how the REST API endpoints work. So far no login auth is allowed. In future updates several endpoints will count with login auth requirement.",
    "version": "0.0.1",
    "title": "Mind Residentials Documentation"
  },
  "host": "gestion-fraccionamiento.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "user",
      "description": "Users CRUD"
    },
    {
      "name": "authentication",
      "description": "Auth routes"
    },
    {
      "name": "residential",
      "description": "Residentials CRUD"
    },
    {
      "name": "house",
      "description": "Houses CRUD"
    },
    {
      "name": "income",
      "description": "Incomes CRUD"
    },
    {
      "name": "outcome",
      "description": "Outcomes CRUD"
    }
  ],
  "paths": {
    "/users/get": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users info from DB",
        "description": "Read of all DB stored users. Thought to be used only by admins.",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "string"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/post": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "Endpoint to create users by administrators.\n Use 1 for testing because there it is a first residential registered.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users_without_ID"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created"
          },
          "400": {
            "description": "Not created"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/get/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by id",
        "description": "Read of a specific user by ID. Used only by admins to check users using ID filter.",
        "operationId": "getUserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID from the user that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Users_with_ID"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/put/{id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "Update of a single user by ID. Used only by admins to update a user by its ID.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user that needs to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users_with_ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Users_with_ID"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/delete/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "Delete of a specific user by ID. Used only by admins to delete users by their ID.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Users_with_ID"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/login/auth": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "To get auth token. So far, it is not working",
        "operationId": "postAuth",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/residentials/get": {
      "get": {
        "tags": [
          "residential"
        ],
        "summary": "Get all residentials from DB",
        "operationId": "getResidentials",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/houses/get": {
      "get": {
        "tags": [
          "house"
        ],
        "summary": "Get all houses from DB",
        "operationId": "getHouses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/incomes/get": {
      "get": {
        "tags": [
          "income"
        ],
        "summary": "Get all incomes from DB",
        "operationId": "getIncomes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/outcomes/get": {
      "get": {
        "tags": [
          "outcome"
        ],
        "summary": "Get all outcomes from DB",
        "operationId": "getOutcomes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Users_with_ID": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "idResDev": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "Hashed password"
        },
        "active": {
          "type": "boolean",
          "description": "User Status"
        },
        "faceId": {
          "type": "string",
          "description": "String to store Face ID data"
        }
      }
    },
    "Users_without_ID": {
      "type": "object",
      "properties": {
        "idResDev": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "Hashed password"
        },
        "active": {
          "type": "boolean",
          "description": "User Status"
        },
        "faceId": {
          "type": "string",
          "description": "String to store Face ID data"
        }
      }
    },
    "ResidentialsData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "HousesData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "address": {
          "type": "string"
        },
        "occupied": {
          "type": "boolean"
        },
        "balance": {
          "type": "number"
        },
        "idResDev": {
          "type": "integer"
        }
      }
    },
    "IncomesData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "idResDev": {
          "type": "integer"
        },
        "idHouse": {
          "type": "integer"
        },
        "date": {
          "type": "string",
          "description": "Date like: 2022-06-20 (YYYY-MM-DD)"
        },
        "amount": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "receipt": {
          "type": "string"
        }
      }
    },
    "OutcomesData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "idResDev": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "description": "Date like: 2022-06-20 (YYYY-MM-DD)"
        },
        "amount": {
          "type": "number"
        }
      },
      "xml": {
        "name": "Users"
      }
    }
  }
}